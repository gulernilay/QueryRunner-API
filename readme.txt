KullanÄ±cÄ± Login Endpointâ€™i (Authentication) 
MantÄ±k:

KullanÄ±cÄ± POST /login ile kullanÄ±cÄ± adÄ± & ÅŸifre gÃ¶nderir.

DBâ€™de doÄŸrulanÄ±r.

JWT Bearer Token Ã¼retilir.

Token bellekte (Ã¶rneÄŸin Redis, memory dict) tutulur â†’ ileride karÅŸÄ±laÅŸtÄ±rma yapÄ±lacak.,


1. auth_controller.py
2. auth_service.py
3. utils/jwt_utils.py 

Ä°kinci Endpoint â€“ Query Ã‡alÄ±ÅŸtÄ±rma
MantÄ±k:

KullanÄ±cÄ± POST /query ile bodyâ€™de stringler gÃ¶nderir (dÃ¶nen varlÄ±klar, stoklar, vs).

Her string, Tablo2â€™deki key ile eÅŸleÅŸir â†’ SQL cÃ¼mlesi Ã§Ä±kar.

AynÄ± DBâ€™ye baÄŸlanÄ±p sorgu Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r.

DÃ¶nen sonuÃ§lar ara tabloda toplanÄ±r â†’ JSON olarak dÃ¶ner.


1.query_controller.py
2.query_service.py

ğŸ”¹ Ã‡alÄ±ÅŸma AkÄ±ÅŸÄ±

KullanÄ±cÄ± POST /login â†’ DB kontrolÃ¼ â†’ JWT token Ã¼retilir.

KullanÄ±cÄ± POST /query â†’ body:

{
  "user_id": 1,
  "token": "xxxx",
  "items": ["dÃ¶nen varlÄ±klar", "stoklar"]
}


Her bir item iÃ§in Tablo2â€™den SQL alÄ±nÄ±r, Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r.

SonuÃ§ JSON dÃ¶ner:

{
  "results": {
    "dÃ¶nen varlÄ±klar": 12345,
    "stoklar": 56789
  }
}

